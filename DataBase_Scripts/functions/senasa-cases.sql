-- Inserto una inspeccion
INSERT INTO TBL_FIELD_INSPECTIONS
(fii_id, fii_soil_ph, fii_humidity, fii_ambient_temperature, fii_nutrient_level, fii_crops_id, fii_agronomists_id)
VALUES (SEQ_FIELD_INSPECTIONS.NEXTVAL, 6.8, 78, 26.5, 'MEDIO', 10, 2);

-- =========================================
-- Cada plaga o enfermedad tiene un impacto diferente para SENASA, por
-- ejemplo, plagas cuarentenarias que son altamente destructivas por ejemplo el
-- HLB de los citricos, se solicita que en el momento que se detecte esta plaga
-- en una finca deben de trasladar la informacion del productor a una tabla
-- especial, la cual sera trasladada periodicamente a SENASA, esta tabla debe
-- de estar totalmente encriptada, ya que su informacion es sumamente
-- delicada y privada.
-- =========================================
-- Impacto SENASA para plagas
ALTER TABLE TBL_PESTS ADD (pes_senasa_impact VARCHAR2(20));
ALTER TABLE TBL_PESTS
  ADD CONSTRAINT CHK_PES_IMPACT CHECK (pes_senasa_impact IN
    ('CUARENTENARIA','CRITICA','ALTA','MEDIA','BAJA','NINGUNA'));

-- Impacto SENASA para enfermedades
ALTER TABLE TBL_DISEASES ADD (dis_senasa_impact VARCHAR2(20));
ALTER TABLE TBL_DISEASES
  ADD CONSTRAINT CHK_DIS_IMPACT CHECK (dis_senasa_impact IN
    ('CUARENTENARIA','CRITICA','ALTA','MEDIA','BAJA','NINGUNA'));

CREATE TABLE TBL_SENASA_CASES_ENC (
  sca_id               NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  sca_created_at       TIMESTAMP DEFAULT SYSTIMESTAMP,
  sca_type             VARCHAR2(10)  CHECK (sca_type IN ('PEST','DISEASE')),
  sca_entity_id        NUMBER NOT NULL,       -- pest_id o disease_id
  sca_farm_id          NUMBER NOT NULL,       -- far_id
  sca_producer_id      NUMBER NOT NULL,       -- pro_id

  -- Encriptados (AES-256):
  sca_producer_name    RAW(2000),
  sca_producer_idnum   RAW(2000),
  sca_producer_email   RAW(2000),
  sca_producer_phone   RAW(2000),
  sca_farm_address     RAW(2000),

  -- IV por fila
  sca_iv               RAW(16)
);

CREATE OR REPLACE PACKAGE PK_CRYPTO AS
  FUNCTION get_key RETURN RAW; -- Obtiene la clave AES-256 (32 bytes)
  FUNCTION random_iv RETURN RAW; -- 16 bytes

  FUNCTION enc_varchar2(p_plain IN VARCHAR2, p_iv IN RAW) RETURN RAW;
  FUNCTION dec_varchar2(p_cipher IN RAW, p_iv IN RAW) RETURN VARCHAR2;
END PK_CRYPTO;
/

CREATE OR REPLACE PACKAGE BODY PK_CRYPTO AS
  -- Clave constante de demo (32 bytes)
  g_demo_key CONSTANT RAW(32) :=
    hextoraw('00112233445566778899AABBCCDDEEFF00112233445566778899AABBCCDDEEFF');

  FUNCTION get_key RETURN RAW IS
    v_key RAW(32);
  BEGIN
    v_key := g_demo_key;
    RETURN v_key;
  END;

  FUNCTION random_iv RETURN RAW IS
    v_iv RAW(16);
  BEGIN
    v_iv := DBMS_CRYPTO.RANDOMBYTES(16);
    RETURN v_iv;
  END;

  FUNCTION enc_varchar2(p_plain IN VARCHAR2, p_iv IN RAW) RETURN RAW IS
    v_key RAW(32) := get_key();
  BEGIN
    IF p_plain IS NULL THEN RETURN NULL; END IF;
    RETURN DBMS_CRYPTO.ENCRYPT(
             src => UTL_I18N.STRING_TO_RAW(p_plain, 'AL32UTF8'),
             typ => DBMS_CRYPTO.AES_CBC_PKCS5,
             key => v_key,
             iv  => p_iv
           );
  END;

  FUNCTION dec_varchar2(p_cipher IN RAW, p_iv IN RAW) RETURN VARCHAR2 IS
    v_key RAW(32) := get_key();
    v_raw RAW(32767);
  BEGIN
    IF p_cipher IS NULL THEN RETURN NULL; END IF;
    v_raw := DBMS_CRYPTO.DECRYPT(
               src => p_cipher,
               typ => DBMS_CRYPTO.AES_CBC_PKCS5,
               key => v_key,
               iv  => p_iv
             );
    RETURN UTL_I18N.RAW_TO_CHAR(v_raw, 'AL32UTF8');
  END;
END PK_CRYPTO;
/

CREATE OR REPLACE PACKAGE PK_SENASA AS
  PROCEDURE capture_pest_case(p_farm_id IN NUMBER, p_pest_id IN NUMBER);
  PROCEDURE capture_disease_case(p_farm_id IN NUMBER, p_disease_id IN NUMBER);
END PK_SENASA;
/

CREATE OR REPLACE PACKAGE BODY PK_SENASA AS

  FUNCTION first_email_for_person(p_person_id NUMBER) RETURN VARCHAR2 IS
    v_email VARCHAR2(200);
  BEGIN
    SELECT MIN(c.con_contact)
      INTO v_email
      FROM TBL_PER_X_CON px
      JOIN TBL_CONTACTS c ON c.con_id = px.pxc_contact_id AND c.con_type = 'EMAIL'
     WHERE px.pxc_person_id = p_person_id;
    RETURN v_email;
  EXCEPTION WHEN NO_DATA_FOUND THEN RETURN NULL;
  END;

  FUNCTION first_phone_for_person(p_person_id NUMBER) RETURN VARCHAR2 IS
    v_tel VARCHAR2(200);
  BEGIN
    SELECT MIN(c.con_contact)
      INTO v_tel
      FROM TBL_PER_X_CON px
      JOIN TBL_CONTACTS c ON c.con_id = px.pxc_contact_id AND c.con_type IN ('TELEFONO','CELULAR')
     WHERE px.pxc_person_id = p_person_id;
    RETURN v_tel;
  EXCEPTION WHEN NO_DATA_FOUND THEN RETURN NULL;
  END;

  FUNCTION farm_address_text(p_farm_id NUMBER) RETURN VARCHAR2 IS
    v_addr VARCHAR2(1000);
  BEGIN
    SELECT add_country||'/'||add_province||'/'||add_canton||'/'||add_district||'/'||
           NVL(add_community,'')||' - '||NVL(add_address,'')
      INTO v_addr
      FROM TBL_FARMS f
      JOIN TBL_ADDRESS a ON a.add_id = f.far_address_id
     WHERE f.far_id = p_farm_id;
    RETURN v_addr;
  EXCEPTION WHEN NO_DATA_FOUND THEN RETURN NULL;
  END;

  PROCEDURE do_insert_enc(
    p_type      IN VARCHAR2,  -- 'PEST' | 'DISEASE'
    p_entity_id IN NUMBER,
    p_farm_id   IN NUMBER
  ) IS
    v_pro_id    NUMBER;
    v_per_id    NUMBER;
    v_name      VARCHAR2(200);
    v_idnum     VARCHAR2(50);
    v_email     VARCHAR2(200);
    v_phone     VARCHAR2(200);
    v_addr      VARCHAR2(1000);
    v_iv        RAW(16);
  BEGIN
    -- 1) productor de la finca
    SELECT pro.pro_id, per.per_id, per.per_name||' '||per.per_lastname, per.per_identification
      INTO v_pro_id, v_per_id, v_name, v_idnum
      FROM TBL_PRODUCERS pro
      JOIN TBL_PERSON per ON per.per_id = pro.pro_person_id
     WHERE pro.pro_farm_id = p_farm_id
       AND pro.pro_active = 'S'
       FETCH FIRST 1 ROWS ONLY;

    -- 2) contactos y direccion
    v_email := first_email_for_person(v_per_id);
    v_phone := first_phone_for_person(v_per_id);
    v_addr  := farm_address_text(p_farm_id);

    -- 3) cifrar e insertar
    v_iv := PK_CRYPTO.random_iv();

    INSERT INTO TBL_SENASA_CASES_ENC(
      sca_type, sca_entity_id, sca_farm_id, sca_producer_id,
      sca_producer_name, sca_producer_idnum, sca_producer_email, sca_producer_phone, sca_farm_address,
      sca_iv
    ) VALUES (
      p_type, p_entity_id, p_farm_id, v_pro_id,
      PK_CRYPTO.enc_varchar2(v_name,  v_iv),
      PK_CRYPTO.enc_varchar2(v_idnum, v_iv),
      PK_CRYPTO.enc_varchar2(v_email, v_iv),
      PK_CRYPTO.enc_varchar2(v_phone, v_iv),
      PK_CRYPTO.enc_varchar2(v_addr,  v_iv),
      v_iv
    );
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      -- No hay productor activo para esa finca; registramos igual el caso con datos minimos?
      NULL; -- o log en tabla de inconsistencias
  END;

  PROCEDURE capture_pest_case(p_farm_id IN NUMBER, p_pest_id IN NUMBER) IS
    v_impact VARCHAR2(20);
  BEGIN
    -- Usa impacto SENASA (o severidad si no agregaste la columna)
    SELECT NVL(pes_senasa_impact, CASE UPPER(pes_severity) WHEN 'CRITICA' THEN 'CRITICA' ELSE 'NINGUNA' END)
      INTO v_impact
      FROM TBL_PESTS
     WHERE pes_id = p_pest_id;

    IF v_impact IN ('CUARENTENARIA','CRITICA') THEN
      do_insert_enc('PEST', p_pest_id, p_farm_id);
    END IF;
  END;

  PROCEDURE capture_disease_case(p_farm_id IN NUMBER, p_disease_id IN NUMBER) IS
    v_impact VARCHAR2(20);
  BEGIN
    SELECT NVL(dis_senasa_impact, CASE UPPER(dis_severity) WHEN 'CRITICA' THEN 'CRITICA' ELSE 'NINGUNA' END)
      INTO v_impact
      FROM TBL_DISEASES
     WHERE dis_id = p_disease_id;

    IF v_impact IN ('CUARENTENARIA','CRITICA') THEN
      do_insert_enc('DISEASE', p_disease_id, p_farm_id);
    END IF;
  END;

END PK_SENASA;
/

-- Plagas en finca
CREATE OR REPLACE TRIGGER TRG_FARM_PESTS_SENASA
AFTER INSERT ON TBL_FARM_X_PESTS
FOR EACH ROW
BEGIN
  PK_SENASA.capture_pest_case(:NEW.fxp_farms_id, :NEW.fxp_pests_id);
END;
/

-- Enfermedades en finca
CREATE OR REPLACE TRIGGER TRG_FARM_DISEASES_SENASA
AFTER INSERT ON TBLS_FAR_X_DIS
FOR EACH ROW
BEGIN
  PK_SENASA.capture_disease_case(:NEW.fxd_farms_id, :NEW.fxd_diseases_id);
END;
/

-- Vista de lectura (solo para rol SENASA_READ)
CREATE OR REPLACE VIEW V_SENASA_CASES_DEC AS
SELECT
  sca_id, sca_created_at, sca_type, sca_entity_id, sca_farm_id, sca_producer_id,
  PK_CRYPTO.dec_varchar2(sca_producer_name,  sca_iv) AS producer_name,
  PK_CRYPTO.dec_varchar2(sca_producer_idnum, sca_iv) AS producer_idnum,
  PK_CRYPTO.dec_varchar2(sca_producer_email, sca_iv) AS producer_email,
  PK_CRYPTO.dec_varchar2(sca_producer_phone, sca_iv) AS producer_phone,
  PK_CRYPTO.dec_varchar2(sca_farm_address,   sca_iv) AS farm_address
FROM TBL_SENASA_CASES_ENC;

-- Solo el rol SENASA_READ puede verla:
-- CREATE ROLE SENASA_READ;
-- GRANT SELECT ON V_SENASA_CASES_DEC TO SENASA_READ;

-- Marca una plaga cuarenÂ­tenaria/critica
UPDATE TBL_PESTS SET pes_senasa_impact = 'CUARENTENARIA' WHERE pes_id = 1;

-- Relaciona la plaga a una finca
INSERT INTO TBL_FARM_X_PESTS (fxp_farms_id, fxp_pests_id) VALUES (10, 1);

-- Debe haber insert en la tabla encriptada
SELECT sca_id, sca_type, sca_entity_id, sca_farm_id, sca_producer_id, sca_iv FROM TBL_SENASA_CASES_ENC;

-- (Si creaste la vista)
SELECT * FROM V_SENASA_CASES_DEC;  -- solo con permisos

